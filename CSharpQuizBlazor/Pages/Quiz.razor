@page "/quiz"
@using CSharpQuizBlazor.Models
@using CSharpQuizBlazor.Services
@inject NavigationManager Navigation

<PageTitle>C# Quiz</PageTitle>

@if (!engine.QuizStarted)
{
    <div class="container d-flex flex-column align-items-center justify-content-center min-vh-100">
        <div class="card shadow-lg p-4" style="max-width: 400px; width: 100%;">
            <h2 class="mb-3 text-center text-primary">Welcome to the C# Quiz!</h2>
            <div class="mb-3">
                <label for="nameInput" class="form-label">Enter your name to start:</label>
                <input id="nameInput" class="form-control form-control-lg" @bind="userName" @bind:event="oninput" placeholder="Your Name" />
            </div>
            <button class="btn btn-success w-100 btn-lg" @onclick="StartQuiz" disabled="@(string.IsNullOrWhiteSpace(userName))">
                <i class="bi bi-play-circle me-2"></i>Start Quiz
            </button>
        </div>
    </div>
}
else if (!engine.QuizFinished)
{
    <div class="container py-4">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <span class="badge bg-info text-dark fs-5">@engine.UserName</span>
                    <span class="badge bg-secondary fs-6">Question @(engine.CurrentQuestionIndex + 1) of @engine.Questions.Count</span>
                </div>
                <div class="progress mb-4" style="height: 1.5rem;">
                    <div class="progress-bar bg-success" role="progressbar" style="width: @(100 * (engine.CurrentQuestionIndex + 1) / engine.Questions.Count)%" aria-valuenow="@(engine.CurrentQuestionIndex + 1)" aria-valuemin="0" aria-valuemax="@engine.Questions.Count">
                        @((engine.CurrentQuestionIndex + 1) * 100 / engine.Questions.Count)%
                    </div>
                </div>
                <div class="card shadow mb-4 animate__animated animate__fadeIn">
                    <div class="card-body">
                        <h4 class="card-title mb-4 text-primary">@((MarkupString)engine.Questions[engine.CurrentQuestionIndex].Text.Replace("\n", "<br />").Replace("\t", "&nbsp;&nbsp;&nbsp;&nbsp;"))</h4>
                        <div class="btn-group-vertical w-100 gap-2">
                            @for (int i = 0; i < engine.Questions[engine.CurrentQuestionIndex].Choices.Count; i++)
                            {
                                int idx = i;
                                <button class="btn btn-outline-primary btn-lg text-start px-4 py-2 fw-semibold @(engine.SelectedAnswers[engine.CurrentQuestionIndex] == idx ? "active bg-primary text-white" : null)" @onclick="() => SelectAnswer(idx)" disabled="@(engine.CurrentQuestionIndex != engine.MaxQuestionReached)">
                                    <span class="me-2">@((char)('A' + idx)).</span> @((MarkupString)@engine.Questions[engine.CurrentQuestionIndex].Choices[idx].Replace("\n", "<br />").Replace("\t", "&nbsp;&nbsp;&nbsp;&nbsp;"))
                                </button>
                            }
                        </div>
                        @if (showFeedback)
                        {
                            <div class="mt-4">
                                @if (lastAnswerCorrect)
                                {
                                    <div class="alert alert-success">Correct!</div>
                                }
                                else
                                {
                                    <div class="alert alert-danger">Incorrect. The correct answer is <b>@engine.Questions[engine.CurrentQuestionIndex].Choices[engine.Questions[engine.CurrentQuestionIndex].CorrectChoiceIndex]</b>.</div>
                                }
                            </div>
                        }
                    </div>
                </div>
                <div class="d-flex justify-content-between mt-3">
                    <button class="btn btn-outline-secondary btn-lg px-4" @onclick="PreviousQuestion" disabled="@(engine.CurrentQuestionIndex == 0 || showFeedback)">
                        <i class="bi bi-arrow-left"></i> Previous
                    </button>
                    <button class="btn btn-success btn-lg px-4" @onclick="NextOrFinish" disabled="@(engine.SelectedAnswers[engine.CurrentQuestionIndex] == null)">
                        @(showFeedback ? "Continue" : (engine.CurrentQuestionIndex == engine.Questions.Count - 1 ? "Finish" : "Next")) <i class="bi bi-arrow-right"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container d-flex flex-column align-items-center justify-content-center min-vh-100">
        <div class="card shadow-lg p-4 text-center" style="max-width: 500px; width: 100%;">
            <h2 class="mb-3 text-success">Quiz Results</h2>
            <p class="fs-4 mb-2"><b>@engine.UserName</b>, you scored <span class="badge bg-primary fs-3">@engine.Score</span> out of <b>@engine.Questions.Count</b>.</p>
            <h4 class="mb-4">Your Level: <span class="badge bg-warning text-dark fs-4">@GetLevel(engine.Score)</span></h4>
            <button class="btn btn-outline-primary btn-lg w-100" @onclick="Restart">
                <i class="bi bi-arrow-repeat me-2"></i>Try Again
            </button>
        </div>
    </div>
}

@code {
    private QuizEngine engine = new QuizEngine();
    private string userName;
    private bool showFeedback = false;
    private bool lastAnswerCorrect = false;

    private void StartQuiz()
    {
        engine.StartQuiz(userName);
        showFeedback = false;
        lastAnswerCorrect = false;
        StateHasChanged();
    }

    private void SelectAnswer(int choiceIndex)
    {
        engine.SelectAnswer(choiceIndex);
        showFeedback = false;
    }

    private async void NextOrFinish()
    {
        if (!showFeedback)
        {
            int? selected = engine.SelectedAnswers[engine.CurrentQuestionIndex];
            if (selected.HasValue)
            {
                lastAnswerCorrect = selected.Value == engine.Questions[engine.CurrentQuestionIndex].CorrectChoiceIndex;
                showFeedback = true;
            }
            StateHasChanged();
            return;
        }
        showFeedback = false;
        if (!engine.NextOrFinish())
        {
            StateHasChanged();
        }
        else
        {
            await FinishQuiz();
        }
    }

    private void PreviousQuestion()
    {
        engine.PreviousQuestion();
        StateHasChanged();
    }

    private async Task FinishQuiz()
    {
        engine.FinishQuiz();
        await PostQuizResultAsync();
        StateHasChanged();
    }

    private async Task PostQuizResultAsync()
    {
        var dto = new QuizResultDto
        {
            UserName = engine.UserName,
            Score = engine.Score,
            WrongQuestions = new List<string>(engine.Questions.Where((q, i) => engine.SelectedAnswers[i] != q.CorrectChoiceIndex).Select(q => q.Text))
        };
        try
        {
            using HttpClient client = new HttpClient();
            string contentType = "application/json";
            string url = "https://csharpquizfunc20250713230151.azurewebsites.net/api/Function1";
            using StringContent content = new StringContent(System.Text.Json.JsonSerializer.Serialize(dto), System.Text.Encoding.UTF8, contentType);
            var response = await client.PostAsync(url, content);
            response.EnsureSuccessStatusCode();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void Restart()
    {
        engine.Restart();
        userName = string.Empty;
        showFeedback = false;
        lastAnswerCorrect = false;
        StateHasChanged();
    }

    private string GetLevel(int score)
    {
        if (score < 10) return "Entry Level Developer";
        if (score < 20) return "Mid Level Developer";
        if (score < 30) return "Senior Developer";
        if (score < 38) return ".NET Architect";
        return "C# God";
    }
}
